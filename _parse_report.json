{
  "brace": 0,
  "paren": 0,
  "bracket": 0,
  "problems": [],
  "tail": "son({ ok:true, authorized:false, remainingMB:0, reason:'not_authorized' });\r\n    const quota = computeRemainingUnified(mapped);\r\n    res.json({ ok:true, authorized:!quota.exhausted, remainingMB:quota.remainingMB, totalBundleMB: quota.totalBundleMB, usedMB: quota.totalUsedMB, exhausted: quota.exhausted, identifier:mapped });\r\n  } catch(err){ res.status(500).json({ ok:false, message:'status error'}); }\r\n});\r\n\r\n// PAC file to simplify user proxy configuration\r\napp.get('/proxy.pac',(req,res)=>{\r\n  try {\r\n    const hostHeader = req.headers.host || ('localhost:'+PORT);\r\n    const hostOnly = hostHeader.split(':')[0];\r\n  const strict = (req.query.strict==='1') || process.env.PAC_STRICT==='true';\r\n  // When strict, we do not offer DIRECT fallback except for portal + RFC1918 + plain hostnames\r\n  const proxyLine = strict ? `PROXY ${hostOnly}:${PROXY_PORT}` : `PROXY ${hostOnly}:${PROXY_PORT}; DIRECT`;\r\n    res.setHeader('Content-Type','application/x-ns-proxy-autoconfig');\r\n  res.end(`function FindProxyForURL(url, host){\\n  host = host.toLowerCase();\\n  // Always go direct for portal host and local/LAN addresses to ensure captive page reachable\\n  if (dnsDomainIs(host, \"${hostOnly}\") || shExpMatch(host, \"192.168.*\") || shExpMatch(host, \"10.*\") || shExpMatch(host, \"172.16.*\") || shExpMatch(host, \"172.17.*\") || shExpMatch(host, \"172.18.*\") || shExpMatch(host, \"172.19.*\") || shExpMatch(host, \"172.2?.*\") || shExpMatch(host, \"172.3?.*\") || isPlainHostName(host)) return \"DIRECT\";\\n  return \"${proxyLine}\";\\n}`);\r\n  } catch(err){ res.status(500).send('PAC error'); }\r\n});\r\n\r\nconsole.log('[DEBUG] About to call startExpress', { PORT, HOST: process.env.HOST || 'undefined' });\r\nstartExpress(PORT, 5);\r\nconsole.log('[DEBUG] startExpress called (synchronous)');\r\n\r\n// Global diagnostics to avoid silent exits\r\nprocess.on('uncaughtException', err=>{\r\n  console.error('[uncaughtException]', err);\r\n});\r\nprocess.on('unhandledRejection', err=>{\r\n  console.error('[unhandledRejection]', err);\r\n});\r\n\r\n}\r\n"
}